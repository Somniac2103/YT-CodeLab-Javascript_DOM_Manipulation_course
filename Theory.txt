DOM MANIPULATION

SELECTING ELEMENTS IN THE DOM

getElementById()

const title = document.getElementById('main-heading');

getElemtByClassName()

const listItem = document.getElementById('listItems');

getElementsByTagName()

const listItem = document.getElementByTagname('li');

querySelector()

const container = document.querySelector('div');

querySelectorALL()

const container = document.querySelectorAll('div');

-----------------------------------------------------------------
 MANIPULATION OF ELEMENTS

---Styling Elements---
Select and store element:
  const title = document.querySelector('#main-heading');
Change attribute in element object:
  title.style.color = 'red';

*can't use inline style on multiple elements must loop throught them changing each individual element by them self. So wen arrays are return then loop must be used

---Creating Elements---
Select and store element:
  const ul = document.querySelector('ul');
Only creates the element in the variable
  const li = document.createElement('li');
Add variable element to html:
  ul.append(li);

---Modify Text in Element---
Select and Store element

console.log(element.innerText); "Simple write text down"
console.log(element.textContent); "Put content of text down in content like if span or strong is used"
console.log(element.innerHTML); "Put content down in the HTML format"

*be careful to use innerHTML as security

---Modifying Attributes and Classes---

Attributes:
li.setAttribute('Type of attribute like id', 'name of type attribute like id name');
li.removeAttribute('id');
li.getAttribute('id');

Classes:
li.classList.add('list-items');
li.classList.remove('list-items');
li.classList.contains('list-items');

---Remove Elements---

li.remove();

-------------------------------------------------------------------
NAVIGATING THE DOM

Transversing the DOM
let ul = document.querySelector('ul');

Parent node Traversal:
console.log(ul.parentNode);
console.log(ul.parentElement);
Grand Parent node*
console.log(ul.parentNode.parentNode);
console.log(ul.parentElement.parentElement);

Child node Traversal:
console.log(ul.childNode);
console.log(ul.childElement);
console.log(ul.firstChild);
console.log(ul.lastChild);
console.log(ul.childNodes[1]);
console.log(ul.children);
console.log(ul.firstElementChild);
console.log(ul.lastElementChild)

Sibling Node Traversal:
*don't need to same tag 
console.log(ul.previousSibling);
console.log(ul.nextSibling);
console.log(ul.previousElementSibling);
console.log(ul.nextElementSibling);

----------------------------------------------------------------
EVENT LISTENERS

inline: onclick = ""

external: element.addEvent Listerner("click", function, boolean);

Mouseover, on

Event Probagation:
  3 Phases
  -Event Capturing
  -Target
  -Event Bubbling

Boolean feature
e = eventobject

-if false the event will bubbling up otherwise the event will stay at the bottom when true.
-can add e.stopPropagation() to stop the Probagation
-can add the {once: true} to only let that event run once.
-can add e.preventDefault()

Event Delegation:
e.target for child element that is being effected.
document.querySelector('#football').addEventListener('click', function(e){
  console.log('football is clicked');
})






